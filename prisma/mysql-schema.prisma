// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "./generated/mysql"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// generator markdown {
//   provider = "prisma-markdown"
//   output   = "../ERD.md"
//   title    = "DongA"
// }

model users{
  id Int @default(autoincrement()) @id
  email String  @unique
  password String
  name  String
  age Int
  gender Gender
  image String?
  type userType
  createdDate DateTime @default(now()) @map("created_date")
  updatedDate DateTime @default(now()) @updatedAt @map("updated_date")

  // relation
  incumbent_additional incumbentsAdditional?
  student_additional studentsAdditional?
  posts posts[]
  comments comments[]
  recommend_posts recommendPosts[] 
  recommend_comments recommendComments[]
  reported_posts reportedPosts[]
  reported_comments reportedComments[]
  reported_users reportedUsers[]
}

model incumbentsAdditional {
  id    Int     @default(autoincrement()) @id
  userId Int @unique @map("user_id")
  jobDescription String? @map("job_description")
  major String?
  school String?
  reportedNum Int @default(0) @map("reported_num")
  adviceCount Int @default(0) @map("advice_count")
  estimationCount Float @default(5.0) @map("estimation_count")
  companyName String? @map("company_name")
  companyWelfare String @default("0000000000") @map("company_welfare")// TODO) category가 정확하게 정해진 후, flag개수 조정
  companyLocation String? @map("company_location")
  updatedDate DateTime @default(now()) @updatedAt @map("updated_date")
  // relation
  users users @relation(fields: [userId], references: [id])

  @@map("incumbents_additional")
}

model studentsAdditional {
  id    Int     @default(autoincrement()) @id
  userId Int @unique @map("user_id")
  major String?
  school String?
  reportedNum Int @default(0) @map("reported_num")
  totalGrade Float? @map("total_grade")
  adviceCount Int @default(0) @map("advice_count")
  estimationCount Float @default(5.0) @map("estimationCount")
  wishJobDescription String? @map("wish_job_description")
  wishCompanyName String? @map("wish_company_name")
  wishCompanyWelfare String? @map("wish_company_welfare")
  wishCompanyLocation String? @map("wish_company_location")
  updatedDate DateTime @default(now()) @updatedAt @map("updated_date")
  // relation
  users users @relation(fields: [userId], references: [id])
  
	@@map("students_additional")
}

model category{
  id    Int     @default(autoincrement()) @id
  name String
  // relation
  posts posts[]
}

model posts {
  id    Int     @default(autoincrement()) @id
  userId Int? @map("user_id")
  categoryId Int? @map("category_id")
  title String
  content String
  view Int @default(0)
  recommend Int @default(0)
  reported Int @default(0)
  createdDate DateTime @default(now()) @map("created_date")
  updatedDate DateTime @default(now()) @updatedAt @map("updated_date")
  // relation
  categories category? @relation(fields: [categoryId], references: [id])
  users users? @relation(fields: [userId], references: [id])
  comments comments[]
  recommend_posts recommendPosts[]
  reported_posts reportedPosts[]
}

model comments {
  id    Int     @default(autoincrement()) @id
  postId Int @map("post_id")
  userId Int? @map("user_id")
  content String
  parentCommentId Int? @map("parent_comment_id")
  recommend Int @default(0)
  reported Int @default(0)
  createdDate DateTime @default(now()) @map("created_date")
  updatedDate DateTime @default(now()) @updatedAt @map("updated_date")
  // relation
  users users? @relation(fields: [userId], references: [id])
  post posts @relation(fields: [postId], references: [id])
  parent  comments? @relation("reply", fields: [parentCommentId], references: [id])
  replies comments[] @relation("reply")
  recommend_comments recommendComments[]
  reported_comments reportedComments[]
}

model recommendPosts {
  id    Int     @default(autoincrement()) @id
  postId Int @map("post_id")
  userId Int @map("user_id")
  createdDate DateTime @default(now()) @map("created_date")
  // relation
  users users? @relation(fields: [userId], references: [id])
  post posts @relation(fields: [postId], references: [id])
	@@map("recommend_posts")
}

model reportedPosts {
  id    Int     @default(autoincrement()) @id
  postId Int @map("post_id")
  userId Int @map("user_id")
  reason String
  createdDate DateTime @default(now()) @map("created_date")
  // relation
  users users? @relation(fields: [userId], references: [id])
  post posts @relation(fields: [postId], references: [id])
	@@map("reported_posts")
}

model recommendComments {
  id    Int     @default(autoincrement()) @id
  commendId Int @map("comment_id")
  userId Int @map("user_id")
  createdDate DateTime @default(now()) @map("created_date")
  // relation
  comment comments @relation(fields: [commendId], references: [id])
  users users? @relation(fields: [userId], references: [id])
	@@map("recommend_comments")
}

model reportedComments {
  id    Int     @default(autoincrement()) @id
  commentId Int @map("comment_id")
  userId Int @map("user_id")
  reason String
  createdDate DateTime @default(now()) @map("created_date")
  // relation
  comment comments @relation(fields: [commentId], references: [id])
  users users? @relation(fields: [userId], references: [id])
	@@map("reported_comments")
}

model reportedUsers {
  id    Int     @default(autoincrement()) @id
  targetUserId Int @map("target_user_id")
  reportingUserId Int @map("reporting_user_id")
  reason String
  createdDate DateTime @default(now()) @map("created_date")
  // relation
  users users? @relation(fields: [targetUserId], references: [id])
	@@map("reported_users")
}

enum Gender {
  male
  female
}

enum userType {
  incumbent
  student
}