// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator markdown {
  provider = "prisma-markdown"
  output   = "../ERD.md"
  title    = "DongA"
}

model incumbents {
  id    Int     @default(autoincrement()) @id
  email String  @unique
  password String
  name  String
  age Int
  gender Gender
  created_date DateTime @default(now())
  // relation
  incumbent_additional incumbents_additional?
  posts posts[]
  comments comments[]
  recommend_posts recommend_posts[]
  recommend_comments recommend_comments[]
  reported_posts reported_posts[]
  reported_comments reported_comments[]
}

model incumbents_additional {
  id    Int     @default(autoincrement()) @id
  incumbent_id Int @unique
  image String?
  school String?
  job_description String?
  reported_num Int @default(0)
  advice_count Int @default(0)
  estimation_count Float @default(5.0)
  major String?
  company_name String?
  company_welfare String @default("0000000000")// TODO) category가 정확하게 정해진 후, flag개수 조정
  company_location String?
  updated_date DateTime @default(now()) @updatedAt 
  // relation
  incumbents incumbents @relation(fields: [incumbent_id], references: [id])
}

model students {
  id    Int     @default(autoincrement()) @id
  email String  @unique
  password String
  name  String
  age Int
  gender Gender
  created_date DateTime @default(now())
  // relation
  student_additional students_additional?
  posts posts[]
  comments comments[]
  recommend_posts recommend_posts[]
  recommend_comments recommend_comments[]
  reported_posts reported_posts[]
  reported_comments reported_comments[]
}

model students_additional {
  id    Int     @default(autoincrement()) @id
  student_id Int @unique
  image String?
  major String?
  school String?
  reported_num Int @default(0)
  total_grade Float?
  advice_count Int @default(0)
  estimation_count Float @default(5.0)
  wish_job_description String?
  wish_company_name String?
  wish_company_welfare String?
  wish_company_location String?
  updated_date DateTime @default(now()) @updatedAt 
  // relation
  students students @relation(fields: [student_id], references: [id])
}

model category{
  id    Int     @default(autoincrement()) @id
  name String
  // relation
  posts posts[]
}

model posts {
  id    Int     @default(autoincrement()) @id
  incumbent_id Int?
  student_id Int?
  categoryId Int?
  title String
  content String
  view Int @default(0)
  hit Int @default(0)
  reported Int @default(0)
  created_date DateTime @default(now())
  updated_date DateTime @default(now()) @updatedAt 
  // relation
  categories category? @relation(fields: [categoryId], references: [id])
  incumbents incumbents? @relation(fields: [incumbent_id], references: [id])
  students students? @relation(fields: [student_id], references: [id])
  comments comments[]
  recommend_posts recommend_posts[]
  reported_posts reported_posts[]
}

model comments {
  id    Int     @default(autoincrement()) @id
  post_id Int
  incumbent_id Int?
  student_id Int?
  content String
  parent_comment_id Int @default(0)
  hit Int @default(0)
  reported Int @default(0)
  created_date DateTime @default(now())
  updated_date DateTime @default(now()) @updatedAt 
  // relation
  incumbents incumbents? @relation(fields: [incumbent_id], references: [id])
  students students? @relation(fields: [student_id], references: [id])
  post posts @relation(fields: [post_id], references: [id])
  recommend_comments recommend_comments[]
  reported_comments reported_comments[]
}

model recommend_posts {
  id    Int     @default(autoincrement()) @id
  post_id Int
  incumbent_id Int?
  student_id Int?
  created_date DateTime @default(now())
  // relation
  incumbent incumbents? @relation(fields: [incumbent_id], references: [id])
  students students? @relation(fields: [student_id], references: [id])
  post posts @relation(fields: [post_id], references: [id])
}

model reported_posts {
  id    Int     @default(autoincrement()) @id
  post_id Int
  incumbent_id Int?
  student_id Int?
  reason String
  created_date DateTime @default(now())
  // relation
  incumbent incumbents? @relation(fields: [incumbent_id], references: [id])
  students students? @relation(fields: [student_id], references: [id])
  post posts @relation(fields: [post_id], references: [id])
}

model recommend_comments {
  id    Int     @default(autoincrement()) @id
  comment_id Int
  incumbent_id Int?
  student_id Int?
  created_date DateTime @default(now())
  // relation
  incumbents incumbents? @relation(fields: [incumbent_id], references: [id])
  students students? @relation(fields: [student_id], references: [id])
  comment comments @relation(fields: [comment_id], references: [id])
}

model reported_comments {
  id    Int     @default(autoincrement()) @id
  comment_id Int
  incumbent_id Int?
  student_id Int?
  reason String
  created_date DateTime @default(now())
  // relation
  incumbents incumbents? @relation(fields: [incumbent_id], references: [id])
  students students? @relation(fields: [student_id], references: [id])
  comment comments @relation(fields: [comment_id], references: [id])
}

enum Gender {
  male
  female
}