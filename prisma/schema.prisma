// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// generator markdown {
//   provider = "prisma-markdown"
//   output   = "../ERD.md"
//   title    = "DongA"
// }

model incumbent_users {
  id    Int     @default(autoincrement()) @id
  email String  @unique
  password String
  name  String
  age Int
  gender Gender
  image String
  reported_num Int @default(0)
  advice_count Int @default(0)
  estimation_count Float @default(5.0)
  major String
  school String
  job_description String
  company_name String?
  company_welfare String @default("0000000000")// TODO) category가 정확하게 정해진 후, flag개수 조정
  company_location String?
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt 
  posts posts[]
  comments comments[]
  recommend_post recommend_post[]
  recommend_comment recommend_comment[]
  reported_post reported_post[]
  reported_comment reported_comment[]
}

model student_users {
  id    Int     @default(autoincrement()) @id
  email String  @unique
  password String
  name  String
  age Int
  gender Gender
  image String
  reported_num Int @default(0)
  total_grade Float
  advice_count Int @default(0)
  estimation_count Float @default(5.0)
  major String
  school String
  wish_job_description String
  wish_company_name String
  wish_company_welfare String
  wish_company_location String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt 
  posts posts[]
  comments comments[]
  recommend_post recommend_post[]
  recommend_comment recommend_comment[]
  reported_post reported_post[]
  reported_comment reported_comment[]
}

model posts {
  id    Int     @default(autoincrement()) @id
  title String
  content String
  view Int @default(0)
  hit Int @default(0)
  reported Int @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt 
  incumbent_user incumbent_users? @relation(fields: [incumbentUserId], references: [id])
  incumbentUserId Int? @map(name: "incumbent_user_id")
  student_user student_users? @relation(fields: [studentUserId], references: [id])
  studentUserId Int? @map(name: "student_user_id")
  comments comments[]
  recommend_post recommend_post[]
  reported_post reported_post[]
}

model comments {
  id    Int     @default(autoincrement()) @id
  content String
  parent_comment_id Int @default(0)
  hit Int @default(0)
  reported Int @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt 
  incumbent_user incumbent_users? @relation(fields: [incumbentUserId], references: [id])
  incumbentUserId Int? @map(name: "incumbent_user_id")
  student_user student_users? @relation(fields: [studentUserId], references: [id])
  studentUserId Int? @map(name: "student_user_id")
  post posts @relation(fields: [post_id], references: [id])
  post_id Int @map(name: "post_id")
  recommend_comment recommend_comment[]
  reported_comment reported_comment[]
}

model recommend_post {
  id    Int     @default(autoincrement()) @id
  incumbent_user incumbent_users? @relation(fields: [incumbentUserId], references: [id])
  incumbentUserId Int? @map(name: "incumbent_user_id")
  student_user student_users? @relation(fields: [studentUserId], references: [id])
  studentUserId Int? @map(name: "student_user_id")
  post posts @relation(fields: [postId], references: [id])
  postId Int @map(name: "post_id")
  createdAt DateTime @default(now())
}

model reported_post {
  id    Int     @default(autoincrement()) @id
  reason String
  incumbent_user incumbent_users? @relation(fields: [incumbentUserId], references: [id])
  incumbentUserId Int? @map(name: "incumbent_user_id")
  student_user student_users? @relation(fields: [studentUserId], references: [id])
  studentUserId Int? @map(name: "student_user_id")
  post posts @relation(fields: [postId], references: [id])
  postId Int @map(name: "post_id")
  createdAt DateTime @default(now())
}


model recommend_comment {
  id    Int     @default(autoincrement()) @id
  incumbent_user incumbent_users? @relation(fields: [incumbentUserId], references: [id])
  incumbentUserId Int? @map(name: "incumbent_user_id")
  student_user student_users? @relation(fields: [studentUserId], references: [id])
  studentUserId Int? @map(name: "student_user_id")
  comment comments @relation(fields: [comment_id], references: [id])
  comment_id Int @map(name: "comment_id")
  createdAt DateTime @default(now())
}

model reported_comment {
  id    Int     @default(autoincrement()) @id
  reason String
  incumbent_user incumbent_users? @relation(fields: [incumbentUserId], references: [id])
  incumbentUserId Int? @map(name: "incumbent_user_id")
  student_user student_users? @relation(fields: [studentUserId], references: [id])
  studentUserId Int? @map(name: "student_user_id")
  comment comments @relation(fields: [comment_id], references: [id])
  comment_id Int @map(name: "comment_id")
  createdAt DateTime @default(now())
}

enum Gender {
  male
  female
}