// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator markdown {
  provider = "prisma-markdown"
  output   = "../ERD.md"
  title    = "DongA"
}

model incumbents {
  id    Int     @default(autoincrement()) @id
  email String  @unique
  password String
  name  String
  age Int
  gender Gender
  createdDate DateTime @default(now()) @map("created_date")
  // relation
  incumbent_additional incumbents_additional?
  posts posts[]
  comments comments[]
  recommend_posts recommend_posts[] 
  recommend_comments recommend_comments[]
  reported_posts reported_posts[]
  reported_comments reported_comments[]
}

model incumbents_additional {
  id    Int     @default(autoincrement()) @id
  incumbentId Int @unique @map("incumbent_id")
  image String?
  school String?
  jobDescription String? @map("job_description")
  reportedNum Int @default(0) @map("reported_num")
  adviceCount Int @default(0) @map("advice_count")
  estimationCount Float @default(5.0) @map("estimation_count")
  major String?
  companyName String? @map("company_name")
  companyWelfare String @default("0000000000") @map("company_welfare")// TODO) category가 정확하게 정해진 후, flag개수 조정
  companyLocation String? @map("company_location")
  updatedDate DateTime @default(now()) @updatedAt @map("updated_date")
  // relation
  incumbents incumbents @relation(fields: [incumbentId], references: [id])
}

model students {
  id    Int     @default(autoincrement()) @id
  email String  @unique
  password String
  name  String
  age Int
  gender Gender
  createdDate DateTime @default(now()) @map("created_date")
  // relation
  student_additional students_additional?
  posts posts[]
  comments comments[]
  recommend_posts recommend_posts[]
  recommend_comments recommend_comments[]
  reported_posts reported_posts[]
  reported_comments reported_comments[]
}

model students_additional {
  id    Int     @default(autoincrement()) @id
  studentId Int @unique @map("student_id")
  image String?
  major String?
  school String?
  reportedNum Int @default(0) @map("reported_num")
  totalGrade Float? @map("total_grade")
  adviceCount Int @default(0) @map("advice_count")
  estimationCount Float @default(5.0) @map("estimationCount")
  wishJobDescription String? @map("wish_job_description")
  wishCompanyName String? @map("wish_company_name")
  wishCompanyWelfare String? @map("wish_company_welfare")
  wishCompanyLocation String? @map("wish_company_location")
  updatedDate DateTime @default(now()) @updatedAt @map("updated_date")
  // relation
  students students @relation(fields: [studentId], references: [id])
}

model category{
  id    Int     @default(autoincrement()) @id
  name String
  // relation
  posts posts[]
}

model posts {
  id    Int     @default(autoincrement()) @id
  incumbentId Int? @map("incumbent_id")
  studentId Int? @map("student_id")
  categoryId Int? @map("category_id")
  title String
  content String
  view Int @default(0)
  recommend Int @default(0)
  reported Int @default(0)
  createdDate DateTime @default(now()) @map("created_date")
  updatedDate DateTime @default(now()) @updatedAt @map("updated_date")
  // relation
  categories category? @relation(fields: [categoryId], references: [id])
  incumbents incumbents? @relation(fields: [incumbentId], references: [id])
  students students? @relation(fields: [studentId], references: [id])
  comments comments[]
  recommend_posts recommend_posts[]
  reported_posts reported_posts[]
}

model comments {
  id    Int     @default(autoincrement()) @id
  postId Int @map("post_id")
  incumbentId Int? @map("incumbent_id")
  studentId Int? @map("student_id")
  content String
  parentCommentId Int @default(0) @map("parent_comment_id")
  hit Int @default(0)
  reported Int @default(0)
  createdDate DateTime @default(now()) @map("created_date")
  updatedDate DateTime @default(now()) @updatedAt @map("updated_date")
  // relation
  incumbents incumbents? @relation(fields: [incumbentId], references: [id])
  students students? @relation(fields: [studentId], references: [id])
  post posts @relation(fields: [postId], references: [id])
  recommend_comments recommend_comments[]
  reported_comments reported_comments[]
}

model recommend_posts {
  id    Int     @default(autoincrement()) @id
  postId Int @map("post_id")
  incumbentId Int? @map("incumbent_id")
  studentId Int? @map("student_id")
  createdDate DateTime @default(now()) @map("created_date")
  // relation
  incumbents incumbents? @relation(fields: [incumbentId], references: [id])
  students students? @relation(fields: [studentId], references: [id])
  post posts @relation(fields: [postId], references: [id])
}

model reported_posts {
  id    Int     @default(autoincrement()) @id
  postId Int @map("post_id")
  incumbentId Int? @map("incumbent_id")
  studentId Int? @map("student_id")
  reason String
  createdDate DateTime @default(now()) @map("created_date")
  // relation
  incumbents incumbents? @relation(fields: [incumbentId], references: [id])
  students students? @relation(fields: [studentId], references: [id])
  post posts @relation(fields: [postId], references: [id])
}

model recommend_comments {
  id    Int     @default(autoincrement()) @id
  commendId Int @map("comment_id")
  incumbentId Int? @map("incumbent_id")
  studentId Int? @map("student_id")
  createdDate DateTime @default(now()) @map("created_date")
  // relation
  comment comments @relation(fields: [commendId], references: [id])
  incumbents incumbents? @relation(fields: [incumbentId], references: [id])
  students students? @relation(fields: [studentId], references: [id])
}

model reported_comments {
  id    Int     @default(autoincrement()) @id
  commendId Int @map("comment_id")
  incumbentId Int? @map("incumbent_id")
  studentId Int? @map("student_id")
  reason String
  createdDate DateTime @default(now()) @map("created_date")
  // relation
  comment comments @relation(fields: [commendId], references: [id])
  incumbents incumbents? @relation(fields: [incumbentId], references: [id])
  students students? @relation(fields: [studentId], references: [id])
}

enum Gender {
  male
  female
}